{"version":3,"sources":["ui/components/input/index.tsx","ui/components/output/index.tsx","ui/components/settings/index.tsx","redux/actions/index.tsx","ui/containers/converter/index.tsx","util/convert.tsx","redux/reducers/index.tsx","redux/store.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Input","_this","this","react_default","a","createElement","className","onChange","event","props","target","value","placeholder","Component","Output","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClickCopy","textarea","current","select","window","document","execCommand","React","createRef","ref","readOnly","type","onClick","disabled","length","Settings","handleModeChange","newValue","onUpdateSettings","objectSpread","settings","mode","upperCaseBias","handleFrequencyChange","Number","handleWhitespaceChange","ignoreCrud","checked","name","id","htmlFor","data-disabled","min","max","Math","round","UPDATE_INPUT_TEXT","UPDATE_SETTINGS","RECOMPUTE_OUTPUT","Converter","components_input","input","receiveInput","components_settings","receiveSettingsUpdate","components_output","output","mapDispatchToProps","newText","payload","newSettings","dispatch","updateSettings","connect","state","convert","split","map","l","i","index","substring","filter","c","test","getTrueIndex","toLocaleUpperCase","toLocaleLowerCase","join","random","toUpperCase","defaultInitialState","root","arguments","undefined","action","App","es","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","containers_converter","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aae2030c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './index.scss'\n\n\ninterface IInputProps {\n  value: string\n  onChange: (newString: string) => void\n}\n\nclass Input extends Component<IInputProps> {\n\n  render() {\n    return (\n      <div className=\"Input\">\n        <form>\n          <div className=\"form-group\">\n            <textarea\n              className=\"form-control\"\n              onChange={(event) => this.props.onChange(event.target.value)}\n              value={this.props.value}\n              placeholder=\"Type here...\">\n            </textarea>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from 'react';\nimport './index.scss'\n\n\ninterface IOutputProps {\n  value: string\n}\n\nclass Output extends Component<IOutputProps> {\n\n  private readonly textarea: React.RefObject<HTMLTextAreaElement>;\n\n  constructor(props: IOutputProps) {\n    super(props);\n\n    this.textarea = React.createRef();\n  }\n\n  handleClickCopy = () => {\n    if (this.textarea.current) {\n      this.textarea.current.select();\n      window.document.execCommand('copy');\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Output\">\n        <form>\n          <div className=\"form-group\">\n            <textarea\n              ref={this.textarea}\n              readOnly\n              value={this.props.value}\n              className=\"form-control\">\n            </textarea>\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={this.handleClickCopy}\n            disabled={this.props.value.length === 0}\n          >\n            Copy\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Output;\n","import React, { Component } from 'react';\nimport { ISettings } from '../../../types/settings'\nimport './index.scss'\n\n\ninterface ISettingsProps {\n  settings: ISettings,\n  onUpdateSettings: (newSettings: ISettings) => void\n}\n\nclass Settings extends Component<ISettingsProps> {\n\n  handleModeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    if (newValue === 'alternating') {\n      this.props.onUpdateSettings({\n        ...this.props.settings,\n        mode: 'alternating'\n      })\n    }\n    else if (newValue === 'randomized') {\n      this.props.onUpdateSettings({\n        ...this.props.settings,\n        mode: 'randomized',\n        upperCaseBias: ('upperCaseBias' in this.props.settings) ? this.props.settings.upperCaseBias : .5\n      })\n    }\n  };\n\n  handleFrequencyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateSettings({\n      ...this.props.settings,\n      mode: 'randomized',\n      upperCaseBias: Number(event.target.value) / 100\n    });\n  };\n\n  handleWhitespaceChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateSettings({\n      ...this.props.settings,\n      ignoreCrud: event.target.checked\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Settings card p-3 mb-3\">\n        <form>\n\n          <fieldset className=\"form-group\">\n            <div className=\"row\">\n              <legend className=\"col-form-label col-sm-2 pt-0\">Mode</legend>\n              <div className=\"col-sm-10\">\n                <div className=\"form-check\">\n                  <input\n                    className=\"form-check-input\"\n                    type=\"radio\"\n                    name=\"gridRadios\"\n                    id=\"gridRadios1\"\n                    value=\"alternating\"\n                    checked={this.props.settings.mode === 'alternating'}\n                    onChange={this.handleModeChange}\n                  />\n                    <label className=\"form-check-label\" htmlFor=\"gridRadios1\">\n                      Alternating\n                    </label>\n                </div>\n                <div className=\"form-check\">\n                  <input\n                    className=\"form-check-input\"\n                    type=\"radio\"\n                    name=\"gridRadios\"\n                    id=\"gridRadios2\"\n                    value=\"randomized\"\n                    checked={this.props.settings.mode === 'randomized'}\n                    onChange={this.handleModeChange}\n                  />\n                    <label className=\"form-check-label\" htmlFor=\"gridRadios2\">\n                      Randomized\n                    </label>\n                </div>\n              </div>\n            </div>\n          </fieldset>\n          <div className=\"form-group row\">\n            <label htmlFor=\"ignore-spaces\" className=\"col-sm-2 col-form-label\">Settings</label>\n            <div className=\"col-sm-10\">\n              <div className=\"form-check\">\n\n                <input\n                  disabled={this.props.settings.mode !== 'alternating'}\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  id=\"ignore-spaces\"\n                  checked={this.props.settings.ignoreCrud}\n                  onChange={this.handleWhitespaceChange}\n                />\n                <span>Ignore Spaces and Punctuation?</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"form-group row\">\n            <label htmlFor=\"cap-frequency\" className=\"col-sm-2 col-form-label\" data-disabled={this.props.settings.mode !== 'randomized'}>Capital Frequency</label>\n            <div className=\"col-sm-10\">\n              <input\n                disabled={this.props.settings.mode !== 'randomized'}\n                type=\"range\"\n                className=\"form-control-range\"\n                id=\"cap-frequency\"\n                min=\"1\"\n                max=\"99\"\n                value={this.props.settings.mode === 'randomized' ? this.props.settings.upperCaseBias * 100 : 50}\n                onChange={this.handleFrequencyChange}\n              />\n              <span>{this.props.settings.mode === 'randomized' ? Math.round(this.props.settings.upperCaseBias * 100) + '%' : null}</span>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Settings;","import IAction from '../../types/action'\nimport { ISettings } from '../../types/settings'\n\nexport const UPDATE_INPUT_TEXT = 'UPDATE_INPUT_TEXT';\nexport const UPDATE_SETTINGS = 'UPDATE_SETTINGS';\nexport const RECOMPUTE_OUTPUT = 'RECOMPUTE_OUTPUT';\n\nexport function receiveInput(newText: string): IAction {\n  return {\n    type: UPDATE_INPUT_TEXT,\n    payload: {\n      newText\n    }\n  }\n}\n//\nexport function recomputeOutput(): IAction {\n  return {\n    type: RECOMPUTE_OUTPUT\n  }\n}\n\nexport function updateSettings(newSettings: ISettings): IAction {\n  return {\n    type: UPDATE_SETTINGS,\n    payload: {\n      newSettings\n    }\n  }\n}\n\nexport function receiveSettingsUpdate(newSettings: ISettings)  {\n  return (dispatch: Function) => {\n    dispatch(updateSettings(newSettings));\n    dispatch(recomputeOutput());\n  }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport IStore from '../../../types/store';\nimport { ISettings } from '../../../types/settings';\nimport Input from '../../components/input';\nimport Output from '../../components/output';\nimport Settings from '../../components/settings';\nimport { receiveInput, receiveSettingsUpdate } from '../../../redux/actions';\nimport './index.scss';\n\ninterface IConverterProps {\n  input: string\n  output: string\n  settings: ISettings\n  receiveInput: (str: string) => void\n  receiveSettingsUpdate: (newSettings: ISettings) => void\n}\n\nclass Converter extends Component<IConverterProps> {\n\n  render() {\n    return (\n      <div className=\"Converter card p-3\">\n        <Input value={this.props.input} onChange={this.props.receiveInput}/>\n        <Settings settings={this.props.settings} onUpdateSettings={this.props.receiveSettingsUpdate}/>\n        <Output value={this.props.output}/>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IStore): IStore => state;\nconst mapDispatchToProps = {\n  receiveInput,\n  receiveSettingsUpdate\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Converter);\n","import { ISettings } from '../types/settings';\n\nfunction getIndexIgnoringCrud(str: string, index: number): number {\n  return index - str.substring(0, index).split('').filter(c => /[^\\w]/.test(c)).length;\n}\n\nexport default function(input: string, settings: ISettings): string {\n  if (settings.mode === 'alternating') {\n    const getTrueIndex = (i: number) => settings.ignoreCrud ? getIndexIgnoringCrud(input, i) : i;\n    return input.split('').map((l, i) => (getTrueIndex(i) % 2 === 0) ? l.toLocaleUpperCase() : l.toLocaleLowerCase()).join('');\n  }\n  if (settings.mode === 'randomized') {\n    return input.split('').map(l => (Math.random() < settings.upperCaseBias) ? l.toLocaleUpperCase() : l.toLocaleLowerCase()).join('');\n  }\n  return input.toUpperCase();\n};","import IAction from '../../types/action';\nimport IStore from '../../types/store';\nimport {UPDATE_INPUT_TEXT, RECOMPUTE_OUTPUT, UPDATE_SETTINGS} from '../actions'\nimport convert from '../../util/convert';\n\nconst defaultInitialState: IStore = {\n  input: '',\n  settings: {\n    mode: 'alternating',\n    ignoreCrud: true,\n  },\n  output: ''\n};\nconst root = (state: IStore=defaultInitialState, action: IAction) => {\n switch (action.type) {\n   case UPDATE_INPUT_TEXT:\n     return {\n       ...state,\n       input: action.payload.newText,\n       output: convert(action.payload.newText, state.settings)\n     };\n   case UPDATE_SETTINGS:\n     return {\n       ...state,\n       settings: action.payload.newSettings\n     };\n   case RECOMPUTE_OUTPUT:\n     return {\n       ...state,\n       output: convert(state.input, state.settings)\n     };\n   default:\n    return state\n }\n};\n\nexport default root;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/';\nimport IStore from '../types/store';\n\n\nconst defaultInitialState: IStore = {\n  input: '',\n  settings: {\n    mode: 'alternating',\n    ignoreCrud: true\n  },\n  output: ''\n};\n\nexport default function configureStore(initialState=defaultInitialState) {\n return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(thunk)\n );\n}","import React, { Component } from 'react';\nimport { Provider } from 'react-redux'\n\nimport Converter from './ui/containers/converter';\nimport configureStore from './redux/store';\nimport './App.scss';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store={configureStore()}>\n        <div className=\"App\">\n          <header>AlTeRnAtInG cApS</header>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm\">\n                <Converter/>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}